u32[1] g = { 42 };

u8[8] t = { 1, 2, 3, 4, 5, 6, 7, 8 };

export
fn fourtytwo() -> reg u32 {
    // RISC-V does not allow relative loads, so we need to take the address
    // of global variables separately.
    reg ptr u32[1] p;
    p = g;

    reg u32 x;
    x = p[0];
    return x;
}

export
fn two() -> reg u32 {
    reg ptr u32[2] p;
    p = t;

    reg u32 x y;
    x = p[0];
    y = p[1];
    x += y;
    return x;
}

export
fn mod4p1() -> reg u32 {
    reg ptr u32[2] t_p;
    t_p = t;

    reg u32 x;
    x = t_p[0];

    // Since RISC-V does not allow offset registers, we need to take the address
    // at the element we want to load.
    reg ptr u32[1] p;
    p = t[u32 0:1];

    reg u32 y;
    y = p[0];

    p = t[u32 1:1];

    reg u32 z;
    z = p[0];

    x += y;
    x += z;

    return x;
}
