export fn nothing(#transient reg u64 a) -> #public reg u64 {
  _ = #init_msf();
  return a;
}

export fn secret(#secret reg u64 a) -> #secret reg u64 {
  return a;
}

export fn branch(#transient reg u64 a, #secret reg u64 b c) -> #secret reg u64 {
  reg u64 r;
  _ = #init_msf();
  if a == 0 {
    r = b;
  } else {
    r = c;
  }
  return c;
}

export fn branchless(#transient reg u64 a, #secret reg u64 b c) -> #secret reg u64 {
  c = b if a == 0;
  return c;
}

u64[2] not = { 1, 0 };

export fn forloop(#transient reg u64 a) -> #public reg u64 {
  reg u64 msf t;
  inline int i;
  msf = #init_msf();
  for i = 0 to 1 + 1 {
    t = not[i];
    t = #protect(t, msf); // TODO: this protect should not be needed
    a ^= t;
  }
  return a;
}

export fn whileloop(#transient reg u64 a) -> #public reg u64 {
  reg u64 msf t i;
  msf = #init_msf();
  ?{}, i = #set0();
  while (i < 2) {
    msf = #update_msf(i < 2, msf);
    t = not[(int) i];
    t = #protect(t, msf);
    a ^= t;
    i += 1;
  }
  return a;
}

export fn archetype(#transient reg u64 i) -> #transient reg u64 {
  reg u64 msf r t;
  msf = #init_msf();
  r = 0;
  if i < 2 {
    msf = #update_msf(i < 2, msf);
    t = not[(int) i];
    t = #protect(t, msf);
    r = not[(int) t];
  }
  return r;
}

export fn load(#transient reg u64 p i)
-> #public reg u64 {
  reg u64 msf r t;
  reg bool b;
  msf = #init_msf();
  r = 0;
  b = i < 2;
  if b {
    msf = #update_msf(b, msf);
    t = [p + 8 * i];
    #declassify r = t;
    r = #protect(r, msf);
  }
  return r;
}

export fn store(#transient reg u64 p i q, #secret reg u64 v) {
  reg u64 msf j;
  msf = #init_msf();
  if i < 2 {
    msf = #update_msf(i < 2, msf);
    j = [p + 8 * i];
    #declassify j = j;
    j = #protect(j, msf);
    [q + 8 * j] = v;
  }
}

export fn msf_after_for_loop(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();

    inline int i;
    for i = 0 to 1 + 1 {
        x += 1;
    }

    x = #protect(x, msf);
    return x;
}

export fn msf_init_in_for_loop(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();

    inline int i;
    for i = 0 to 1 + 1 {
        msf = #init_msf();
    }

    x = #protect(x, msf);
    return x;
}


export fn msf_mov_in_for_loop(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();

    inline int i;
    for i = 0 to 1 + 1 {
        msf = #mov_msf(msf);
    }

    x = #protect(x, msf);
    return x;
}

export fn for_loop_one_iter(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    inline int i;
    for i = 0 to 1 {
        msf = #init_msf();
    }
    x = #protect(x, msf);
    return x;
}

inline fn zero_iterations_dont_mod_msf_aux(reg u64 x) -> {
    inline int i;
    for i = 4 to 0 {
        if (x == 0) {}
    }
}

export
fn zero_iterations_dont_mod_msf(#transient reg u64 x) -> #public reg u64 {
    reg u64 msf;
    msf = #init_msf();
    zero_iterations_dont_mod_msf_aux(x);
    x = #protect(x, msf);
    return x;
}
